"use strict";

/* defer - сообщает браузеру, что он должен продолжать обрабатывать
страницу и продолжает загружать/запускать скрипт в фоновом режиме 
1. скрипты с defer никогда не блокируют страницу
2. скрипты с атрибутом defer, всегда выполняются, когда dom дерево
готово, т.е они ждут полной готовности верстки*/

/* using async 
    1. Страница не ждет асинхронных скриптов, содежимое просто обрабатывается и
    отображается
    2. События DOMContentLoaded и скрипты не ждут друг друга
    3. Скрипты никого не ждут, они работают как только загрузятся.
    Кто первый загрузился, тот и работает 
    4. Мы должны быть уверены, что скрипты async не зависят от DOM структуры
    и не должен зависеть от других скриптов */

    /* Скрипты с async/defer можно помещать в любое место на странице */
const p = document.querySelectorAll('p');
console.log(p);

/* // создаем переменную для размещения скрипта на странице script.js
// задаем в скобках тег script
const script = document.createElement('script');
// обращаемся к атрибуту script
script.src = "js/script.js";
// помещаем элемент на страницу
// скрипт загружается только после выполнения нижней строчки
document.body.append(script);
/*  для изменения порядка загрузки скриптов нужно обратиться к 
атрибуту script.async = false; */ */

function loadScript(src) {
    const script = document.createElement('script');
    script.src = src;
    // при данном атрибуте скрипты выполняются строго друг за другом
    script.async = false;
    document.body.append(script);
}
// вызываем функцию и передаем путь до скрипта
loadScript("js/script.js");
loadScript("js/someScript.js");












